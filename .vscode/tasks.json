// Run tasks like `pwsh -C ". scripts/Initialize-Shell.ps1; {task}` to run profile-like
// commands without requiring users to modify global profile.

{
  "version": "2.0.0",
  "inputs": [
    {
      "id": "version",
      "type": "promptString",
      "description": "Version number."
    },
    {
      "id": "dependency",
      "type": "promptString",
      "description": "Show tree of packages requesting this dependency."
    },
    {
      "id": "templateOptions",
      "type": "pickString",
      "description": "Template options.",
      "options": ["", "-Prompt", "-Stay", "-Stay -Prompt", "-Recopy -Prompt"]
    },
    {
      "id": "ref",
      "type": "promptString",
      "description": "Commit SHA or other VCS reference."
    },
    {
      "id": "changeType",
      "type": "pickString",
      "description": "Change type.",
      "options": ["breaking", "deprecation", "change"]
    }
  ],
  "tasks": [
    {
      "label": "proj: set symlink propshop",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": ".tools/scripts/Set-SymlinkPropshop.ps1",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "proj: update boilercore",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": ".tools/scripts/Update-Boilercore.ps1",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "proj: local dev configs (Pyrightconfig, pytest.ini)",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "python .tools/scripts/local_dev_configs.py",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "dvc repro ${input:stage}"],
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro force downstream",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "dvc repro --force-downstream ${input:stage}"],
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro force",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "dvc repro --force ${input:stage}"],
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: dag",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "type": "process",
      "command": "pwsh",
      "args": [
        "-Command",
        "(dvc dag --md) -Replace 'mermaid', '{mermaid}' > docs/dag.md && . '~/.local/nodeenvs/markdownlint/Scripts/Activate.ps1' && markdownlint --fix docs/dag.md"
      ],
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: synchronize params",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "python -m boilerdata.models.params"],
      "icon": { "id": "graph" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * WSL-SPECIFIC * //

    {
      "label": "wsl: Copy PID of Python Debugger",
      "type": "shell",
      "command": "ps aux | grep python | grep --max-count 1 -- --adapter-access-token | grep --only-matching --perl-regexp 'user\\s+\\d+' | grep --only-matching --perl-regexp '\\d+' | clip.exe",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "close": false,
        "focus": true,
        "reveal": "always"
      },
      "icon": { "id": "terminal-linux" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * PROJECT SETUP * //

    {
      "label": "setup: Sync with template",
      "type": "shell",
      "command": "scripts/Sync-Template.ps1 ${input:templateOptions}",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Sync with specific template ref",
      "type": "shell",
      "command": "scripts/Sync-Template.ps1 ${input:ref} ${input:templateOptions}",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Sync contributor environment",
      "type": "shell",
      "command": "if (!$Env:DEVCONTAINER) {scripts/Sync-Py.ps1}",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": [],
      "runOptions": {
        "runOn": "folderOpen"
      }
    },
    {
      "label": "setup: Initialize repository",
      "type": "shell",
      "command": "scripts/Initialize-Repo.ps1",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Remove *.rej",
      "type": "shell",
      "command": "Get-ChildItem -Recurse -Filter *.rej | Remove-Item",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Initialize Windows machine",
      "type": "shell",
      "options": { "shell": { "executable": "powershell" } },
      "command": "scripts/Initialize-Windows.ps1",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Initialize Linux/MacOS machine",
      "type": "shell",
      "options": { "shell": { "executable": "bash" } },
      "command": "scripts/Initialize-LinuxMacOS.sh",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Finish initializing machine (cross-platform)",
      "type": "shell",
      "command": "scripts/Initialize-Machine.ps1",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * PRE-COMMIT * //

    {
      "label": "pre-commit",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; pre-commit",
      "icon": { "id": "git-commit" },
      "problemMatcher": []
    },
    {
      "label": "pre-commit: all",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; pre-commit run --all-files",
      "icon": { "id": "git-commit" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * GIT * //

    {
      "label": "git: Rebase back to fork",
      "type": "shell",
      "command": "git rebase -i --fork-point main",
      "icon": { "id": "git-branch" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * OTHER TASKS * //

    {
      "label": "task: Generate changelog entry",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; python -m boilerdata_tools add-change ${input:changeType}",
      "icon": { "id": "request-changes" },
      "problemMatcher": []
    },
    {
      "label": "task: Show tree of packages requesting a dependency",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; pipdeptree --reverse --packages ${input:dependency}",
      "icon": { "id": "versions" },
      "problemMatcher": []
    },
    {
      "label": "task: Run pytest with coverage",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; pytest --cov  --cov-config pyproject.toml --cov-report xml",
      "icon": { "id": "check" },
      "problemMatcher": []
    },
    {
      "label": "task: Run ruff",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; ruff check .; ruff format .",
      "icon": { "id": "check" },
      "problemMatcher": []
    },
    {
      "label": "task: sphinx-autobuild docs (preview)",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; sphinx-autobuild -T docs _site --ignore **/apidocs",
      "icon": { "id": "book" },
      "problemMatcher": []
    },
    {
      "label": "task: profile this file",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; python -m cProfile -o .prof ${file}",
      "icon": { "id": "graph-line" },
      "problemMatcher": []
    },
    {
      "label": "task: view profile results with snakeviz",
      "type": "shell",
      "command": ". scripts/Initialize-Shell.ps1; snakeviz .prof",
      "icon": { "id": "graph-line" },
      "problemMatcher": []
    },
    {
      "label": "task: Bump version",
      "type": "shell",
      "command": "copier update --vcs-ref=$(git rev-parse HEAD:submodules/template) --defaults --data project_version='${input:version}'; git add .; git commit -m 'Bump version'; towncrier build --version '${input:version}'",
      "icon": { "id": "graph-line" },
      "problemMatcher": []
    }
  ]
}
